 var path2regexp = (function() { var c = '/'; var d = './'; var j = new RegExp(['(\\\\.)', '(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?'].join('|'), 'g'); function i(M, E) { var N = []; var x = 0; var v = 0; var G = ''; var q = (E && E.delimiter) || c; var s = (E && E.delimiters) || d; var H = false; var L; while ((L = j.exec(M)) !== null) { var y = L[0]; var t = L[1]; var C = L.index; G += M.slice(v, C); v = C + y.length; if (t) { G += t[1]; H = true; continue } var J = ''; var B = M[v]; var A = L[2]; var p = L[3]; var u = L[4]; var z = L[5]; if (!H && G.length) { var w = G.length - 1; if (s.indexOf(G[w]) > -1) { J = G[w]; G = G.slice(0, w) } } if (G) { N.push(G); G = ''; H = false } var F = J !== '' && B !== undefined && B !== J; var K = z === '+' || z === '*'; var D = z === '?' || z === '*'; var r = J || q; var I = p || u; N.push({ name: A || x++, prefix: J, delimiter: r, optional: D, repeat: K, partial: F, pattern: I ? e(I) : '[^' + f(r) + ']+?' }) } if (G || v < M.length) { N.push(G + M.substr(v)) } return N } function b(q, p) { return n(i(q, p)) } function n(r) { var q = new Array(r.length); for (var p = 0; p < r.length; p++) { if (typeof r[p] === 'object') { q[p] = new RegExp('^(?:' + r[p].pattern + ')$') } } return function(s, w) { var x = ''; var t = (w && w.encode) || encodeURIComponent; for (var u = 0; u < r.length; u++) { var z = r[u]; if (typeof z === 'string') { x += z; continue } var A = s ? s[z.name] : undefined; var y; if (Array.isArray(A)) { if (!z.repeat) { throw new TypeError('Expected "' + z.name + '" to not repeat, but got array') } if (A.length === 0) { if (z.optional) { continue } throw new TypeError('Expected "' + z.name + '" to not be empty') } for (var v = 0; v < A.length; v++) { y = t(A[v], z); if (!q[u].test(y)) { throw new TypeError('Expected all "' + z.name + '" to match "' + z.pattern + '"') }x += (v === 0 ? z.prefix : z.delimiter) + y } continue } if (typeof A === 'string' || typeof A === 'number' || typeof A === 'boolean') { y = t(String(A), z); if (!q[u].test(y)) { throw new TypeError('Expected "' + z.name + '" to match "' + z.pattern + '", but got "' + y + '"') }x += z.prefix + y; continue } if (z.optional) { if (z.partial) { x += z.prefix } continue } throw new TypeError('Expected "' + z.name + '" to be ' + (z.repeat ? 'an array' : 'a string')) } return x } } function f(p) { return p.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1') } function e(p) { return p.replace(/([=!:$/()])/g, '\\$1') } function h(p) { return p && p.sensitive ? '' : 'i' } function l(s, r) { if (!r) { return s } var p = s.source.match(/\((?!\?)/g); if (p) { for (var q = 0; q < p.length; q++) { r.push({ name: q, prefix: null, delimiter: null, optional: false, repeat: false, partial: false, pattern: null }) } } return s } function a(t, q, r) { var s = []; for (var p = 0; p < t.length; p++) { s.push(k(t[p], q, r).source) } return new RegExp('(?:' + s.join('|') + ')', h(r)) } function m(r, p, q) { return o(i(r, q), p, q) } function o(C, w, x) { x = x || {}; var A = x.strict; var s = x.end !== false; var q = f(x.delimiter || c); var r = x.delimiters || d; var t = [].concat(x.endsWith || []).map(f).concat('$').join('|'); var z = ''; var v = false; for (var u = 0; u < C.length; u++) { var B = C[u]; if (typeof B === 'string') { z += f(B); v = u === C.length - 1 && r.indexOf(B[B.length - 1]) > -1 } else { var y = f(B.prefix); var p = B.repeat ? '(?:' + B.pattern + ')(?:' + y + '(?:' + B.pattern + '))*' : B.pattern; if (w) { w.push(B) } if (B.optional) { if (B.partial) { z += y + '(' + p + ')?' } else { z += '(?:' + y + '(' + p + '))?' } } else { z += y + '(' + p + ')' } } } if (s) { if (!A) { z += '(?:' + q + ')?' }z += t === '$' ? '$' : '(?=' + t + ')' } else { if (!A) { z += '(?:' + q + '(?=' + t + '))?' } if (!v) { z += '(?=' + q + '|' + t + ')' } } return new RegExp('^' + z, h(x)) } function k(r, p, q) { if (r instanceof RegExp) { return l(r, p) } if (Array.isArray(r)) { return a((r), p, q) } return m((r), p, q) } var g = k; g.parse = i; g.compile = b; g.tokensToFunction = n; g.tokensToRegExp = o; return g })();
export default path2regexp